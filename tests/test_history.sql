CREATE TABLE FOO (
    ID INTEGER NOT NULL PRIMARY KEY,
    VALUE INTEGER NOT NULL
)!

CALL CREATE_HISTORY_TABLE('FOO', 'DAY')!
CALL ASSERT_TABLE_EXISTS('FOO_HISTORY')!
VALUES ASSERT_EQUALS(4, (SELECT COUNT(*) FROM (
    SELECT COLNO, COLNAME
    FROM SYSCAT.COLUMNS
    WHERE TABSCHEMA = CURRENT SCHEMA
    AND TABNAME = 'FOO_HISTORY'

    INTERSECT

    VALUES
        (0, 'EFFECTIVE_DAY'),
        (1, 'EXPIRY_DAY'),
        (2, 'ID'),
        (3, 'VALUE')
    ) AS T))!

CALL CREATE_HISTORY_TRIGGERS('FOO', 'DAY')!
CALL ASSERT_TRIGGER_EXISTS('FOO_INSERT')!
CALL ASSERT_TRIGGER_EXISTS('FOO_UPDATE')!
CALL ASSERT_TRIGGER_EXISTS('FOO_DELETE')!
CALL ASSERT_TRIGGER_EXISTS('FOO_KEYCHG')!

CALL CREATE_HISTORY_CHANGES('FOO_HISTORY')!
CALL ASSERT_TABLE_EXISTS('FOO_CHANGES')!

BEGIN ATOMIC
    -- This block ensures that the test is accurate even it happens to run over
    -- a day boundary; a compound atomic statement counts as one statement so
    -- all sub-statements within it get the same value for CURRENT TIMESTAMP /
    -- CURRENT DATE / etc.
    INSERT INTO FOO (ID, VALUE) VALUES (1, 1);
    VALUES ASSERT_EQUALS(1, (SELECT COUNT(*) FROM (
        SELECT * FROM FOO_HISTORY

        INTERSECT

        VALUES
            (CURRENT DATE, '9999-12-31', 1, 1)
        ) AS T));

    DELETE FROM FOO WHERE ID = 1;
    VALUES ASSERT_EQUALS(0, (SELECT COUNT(*) FROM FOO_HISTORY));

    -- In this part we cheat and tweak the history after insertion to test the
    -- other half of the deletion trigger's functionality
    INSERT INTO FOO (ID, VALUE) VALUES (1, 1);
    UPDATE FOO_HISTORY SET EFFECTIVE_DAY = CURRENT DATE - 1 DAY WHERE ID = 1;
    DELETE FROM FOO WHERE ID = 1;
    VALUES ASSERT_EQUALS(1, (SELECT COUNT(*) FROM (
        SELECT * FROM FOO_HISTORY

        INTERSECT

        VALUES
            (CURRENT DATE - 1 DAY, CURRENT DATE - 1 DAY, 1, 1)
        ) AS T));

    INSERT INTO FOO (ID, VALUE) VALUES (2, 1);
    VALUES ASSERT_EQUALS(2, (SELECT COUNT(*) FROM (
        SELECT * FROM FOO_HISTORY

        INTERSECT

        VALUES
            (CURRENT DATE - 1 DAY, CURRENT DATE - 1 DAY, 1, 1),
            (CURRENT DATE,         '9999-12-31',         2, 1)
        ) AS T));

    UPDATE FOO SET VALUE = 2 WHERE ID = 2;
    VALUES ASSERT_EQUALS(2, (SELECT COUNT(*) FROM (
        SELECT * FROM FOO_HISTORY

        INTERSECT

        VALUES
            (CURRENT DATE - 1 DAY, CURRENT DATE - 1 DAY, 1, 1),
            (CURRENT DATE,         '9999-12-31',         2, 2)
        ) AS T));

    -- Again, we cheat and tweak the history to pretend the ID=2 row was
    -- inserted yesterday
    UPDATE FOO_HISTORY SET EFFECTIVE_DAY = CURRENT DATE - 1 DAY WHERE ID = 2;
    UPDATE FOO SET VALUE = 1 WHERE ID = 2;
    VALUES ASSERT_EQUALS(3, (SELECT COUNT(*) FROM (
        SELECT * FROM FOO_HISTORY

        INTERSECT

        VALUES
            (CURRENT DATE - 1 DAY, CURRENT DATE - 1 DAY, 1, 1),
            (CURRENT DATE - 1 DAY, CURRENT DATE - 1 DAY, 2, 2),
            (CURRENT DATE,         '9999-12-31',         2, 1)
        ) AS T));

    VALUES ASSERT_EQUALS(4, (SELECT COUNT(*) FROM (
        SELECT * FROM FOO_CHANGES

        INTERSECT

        VALUES
            (CURRENT DATE - 1 DAY, 'INSERT', NULL, 1,      NULL, 1),
            (CURRENT DATE,         'DELETE', 1,    NULL,   1,    NULL),
            (CURRENT DATE - 1 DAY, 'INSERT', NULL, 2,      NULL, 2),
            (CURRENT DATE,         'UPDATE', 2,    2,      2,    1)
        ) AS T));
END!

CALL ASSERT_SIGNALS(HISTORY_UPDATE_PK_STATE, 'UPDATE FOO SET ID = 4 WHERE ID = 2')!

DROP VIEW FOO_CHANGES!
DROP TABLE FOO_HISTORY!
DROP TRIGGER FOO_DELETE!
DROP TRIGGER FOO_UPDATE!
DROP TRIGGER FOO_INSERT!
DROP TRIGGER FOO_KEYCHG!
DELETE FROM FOO!

CALL CREATE_HISTORY_TABLE('FOO', 'MICROSECOND')!
CALL ASSERT_TABLE_EXISTS('FOO_HISTORY')!
VALUES ASSERT_EQUALS(4, (SELECT COUNT(*) FROM (
    SELECT COLNO, COLNAME
    FROM SYSCAT.COLUMNS
    WHERE TABSCHEMA = CURRENT SCHEMA
    AND TABNAME = 'FOO_HISTORY'

    INTERSECT

    VALUES
        (0, 'EFFECTIVE_MICROSECOND'),
        (1, 'EXPIRY_MICROSECOND'),
        (2, 'ID'),
        (3, 'VALUE')
    ) AS T))!

CALL CREATE_HISTORY_TRIGGERS('FOO', 'MICROSECOND')!
CALL ASSERT_TRIGGER_EXISTS('FOO_INSERT')!
CALL ASSERT_TRIGGER_EXISTS('FOO_UPDATE')!
CALL ASSERT_TRIGGER_EXISTS('FOO_DELETE')!
CALL ASSERT_TRIGGER_EXISTS('FOO_KEYCHG')!

CALL CREATE_HISTORY_CHANGES('FOO_HISTORY')!
CALL ASSERT_TABLE_EXISTS('FOO_CHANGES')!
VALUES ASSERT_EQUALS(6, (SELECT COUNT(*) FROM (
    SELECT COLNO, COLNAME
    FROM SYSCAT.COLUMNS
    WHERE TABSCHEMA = CURRENT SCHEMA
    AND TABNAME = 'FOO_CHANGES'

    INTERSECT

    VALUES
        (0, 'CHANGED'),
        (1, 'CHANGE'),
        (2, 'OLD_ID'),
        (3, 'NEW_ID'),
        (4, 'OLD_VALUE'),
        (5, 'NEW_VALUE')
    ) AS T))!

-- XXX The following test *might* fail if the machine running the test is fast
-- enough to run two consecutive manipulations of the base FOO table including
-- all dependent triggers within a single microsecond ... but I don't think
-- that's terribly likely ...

BEGIN ATOMIC
    INSERT INTO FOO VALUES (1, 1);
    VALUES ASSERT_EQUALS(CURRENT TIMESTAMP, (
        SELECT EFFECTIVE_MICROSECOND
        FROM FOO_HISTORY
        WHERE ID = 1
        AND EXPIRY_MICROSECOND = '9999-12-31 23:59:59.999999'));
END!

BEGIN ATOMIC
    INSERT INTO FOO VALUES (2, 1);
    VALUES ASSERT_EQUALS(CURRENT TIMESTAMP, (
        SELECT EFFECTIVE_MICROSECOND
        FROM FOO_HISTORY
        WHERE ID = 2
        AND EXPIRY_MICROSECOND = '9999-12-31 23:59:59.999999'));
END!

BEGIN ATOMIC
    DECLARE INSERTED TIMESTAMP DEFAULT NULL;

    SET INSERTED = (SELECT EFFECTIVE_MICROSECOND FROM FOO_HISTORY WHERE ID = 1);
    DELETE FROM FOO WHERE ID = 1;
    VALUES ASSERT_EQUALS(CURRENT TIMESTAMP - 1 MICROSECOND, (
        SELECT EXPIRY_MICROSECOND
        FROM FOO_HISTORY
        WHERE ID = 1
        AND EFFECTIVE_MICROSECOND = INSERTED));
END!

BEGIN ATOMIC
    DECLARE INSERTED TIMESTAMP DEFAULT NULL;

    SET INSERTED = (SELECT EFFECTIVE_MICROSECOND FROM FOO_HISTORY WHERE ID = 2);
    UPDATE FOO SET VALUE = 2 WHERE ID = 2;
    VALUES ASSERT_EQUALS(CURRENT TIMESTAMP - 1 MICROSECOND, (
        SELECT EXPIRY_MICROSECOND
        FROM FOO_HISTORY
        WHERE ID = 2
        AND VALUE = 1
        AND EFFECTIVE_MICROSECOND = INSERTED));
    VALUES ASSERT_EQUALS(CURRENT TIMESTAMP, (
        SELECT EFFECTIVE_MICROSECOND
        FROM FOO_HISTORY
        WHERE ID = 2
        AND VALUE = 2
        AND EXPIRY_MICROSECOND = '9999-12-31 23:59:59.999999'));
END!

BEGIN ATOMIC
    DECLARE INSERTED1 TIMESTAMP DEFAULT NULL;
    DECLARE INSERTED2 TIMESTAMP DEFAULT NULL;
    DECLARE DELETED1 TIMESTAMP DEFAULT NULL;
    DECLARE UPDATED2 TIMESTAMP DEFAULT NULL;

    SET INSERTED1 = (SELECT EFFECTIVE_MICROSECOND FROM FOO_HISTORY WHERE ID = 1);
    SET DELETED1 = (SELECT EXPIRY_MICROSECOND + 1 MICROSECOND FROM FOO_HISTORY WHERE ID = 1);
    SET INSERTED2 = (SELECT EFFECTIVE_MICROSECOND FROM FOO_HISTORY WHERE ID = 2 AND VALUE = 1);
    SET UPDATED2 = (SELECT EFFECTIVE_MICROSECOND FROM FOO_HISTORY WHERE ID = 2 AND VALUE = 2);
    VALUES ASSERT_EQUALS(4, (SELECT COUNT(*) FROM (
        SELECT * FROM FOO_CHANGES

        INTERSECT

        VALUES
            (INSERTED1, 'INSERT', NULL, 1,    NULL, 1),
            (DELETED1,  'DELETE', 1,    NULL, 1,    NULL),
            (INSERTED2, 'INSERT', NULL, 2,    NULL, 1),
            (UPDATED2,  'UPDATE', 2,    2,    1,    2)
        ) AS T));
END!

DROP VIEW FOO_CHANGES!
DROP TABLE FOO_HISTORY!
DROP TRIGGER FOO_INSERT!
DROP TRIGGER FOO_UPDATE!
DROP TRIGGER FOO_DELETE!
DROP TRIGGER FOO_KEYCHG!
DELETE FROM FOO!

CALL CREATE_HISTORY_TABLE('FOO', 'WEEK_ISO')!
CALL ASSERT_TABLE_EXISTS('FOO_HISTORY')!
VALUES ASSERT_EQUALS(4, (SELECT COUNT(*) FROM (
    SELECT COLNO, COLNAME
    FROM SYSCAT.COLUMNS
    WHERE TABSCHEMA = CURRENT SCHEMA
    AND TABNAME = 'FOO_HISTORY'

    INTERSECT

    VALUES
        (0, 'EFFECTIVE_WEEK_ISO'),
        (1, 'EXPIRY_WEEK_ISO'),
        (2, 'ID'),
        (3, 'VALUE')
    ) AS T))!

CALL CREATE_HISTORY_TRIGGERS('FOO', 'WEEK_ISO', '-7 DAYS')!
CALL ASSERT_TRIGGER_EXISTS('FOO_INSERT')!
CALL ASSERT_TRIGGER_EXISTS('FOO_UPDATE')!
CALL ASSERT_TRIGGER_EXISTS('FOO_DELETE')!
CALL ASSERT_TRIGGER_EXISTS('FOO_KEYCHG')!

BEGIN ATOMIC
    DECLARE INSERTED1 DATE DEFAULT NULL;

    SET INSERTED1 = (
        SELECT INSERTED FROM NEW TABLE(
            INSERT INTO FOO
                INCLUDE (INSERTED TIMESTAMP)
                VALUES (1, 1, CURRENT TIMESTAMP)
        ) AS T);
    VALUES ASSERT_EQUALS(WEEKSTART_ISO(INSERTED1 - 7 DAYS), (
        SELECT EFFECTIVE_WEEK_ISO
        FROM FOO_HISTORY
        WHERE ID = 1
        AND EXPIRY_WEEK_ISO = '9999-12-31'));
END!

DROP TABLE FOO_HISTORY!
DROP TABLE FOO!

