VALUES ASSERT_EQUALS(AUTH_TYPE(CURRENT USER), 'U')!
VALUES ASSERT_EQUALS(AUTH_TYPE('PUBLIC'), 'G')!
-- Cross-dependency: LOG_READER is defined by the log.sql module
VALUES ASSERT_EQUALS(AUTH_TYPE('UTILS_LOG_READER'), 'R')!

-- Check that AUTHS_HELD and AUTH_DIFF work for a simple SELECT authority on a
-- table
CREATE TABLE FOO (I INTEGER NOT NULL)!
GRANT SELECT ON TABLE FOO TO USER BAR!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTHS_HELD('BAR')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'), 1)!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTH_DIFF('BAR', 'BAZ')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'), 1)!

-- Check that COPY_AUTH transfers the SELECT authority and nothing else
CALL COPY_AUTH('BAR', 'BAZ')!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTHS_HELD('BAZ')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'), 1)!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTH_DIFF('BAR', 'BAZ')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'), 0)!

-- Check that REMOVE_AUTH removes the SELECT authority
CALL REMOVE_AUTH('BAR')!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTHS_HELD('BAR')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'), 0)!

-- Check that the same SELECT authority WITH GRANT OPTION counts as a
-- difference
GRANT SELECT ON TABLE FOO TO USER BAR WITH GRANT OPTION!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTHS_HELD('BAR')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'), 1)!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTH_DIFF('BAR', 'BAZ')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'), 1)!

-- Check that COPY_AUTH upgrades BAZ's SELECT authority
CALL COPY_AUTH('BAR', 'BAZ')!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTHS_HELD('BAZ')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'
    AND SUFFIX = 'WITH GRANT OPTION'), 1)!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTH_DIFF('BAR', 'BAZ')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'), 0)!

-- Check that MOVE_AUTH does the same as COPY_AUTH followed by REMOVE_AUTH
CALL REMOVE_AUTH('BAR')!
CALL REMOVE_AUTH('BAZ')!
GRANT SELECT ON TABLE FOO TO USER BAR!
CALL MOVE_AUTH('BAR', 'BAZ')!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTHS_HELD('BAR')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'), 0)!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTHS_HELD('BAZ')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'
    AND SUFFIX = ''), 1)!

-- Check that COPY_AUTH and REMOVE_AUTH work for CONTROL authority, which
-- implies a whole load of other authorities and caused interesting issues with
-- removal order
CALL REMOVE_AUTH('BAR')!
CALL REMOVE_AUTH('BAZ')!
GRANT CONTROL ON TABLE FOO TO USER BAR!
CALL MOVE_AUTH('BAR', 'BAZ')!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTHS_HELD('BAR')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'), 0)!

VALUES ASSERT_EQUALS((
    SELECT COUNT(*)
    FROM TABLE(AUTHS_HELD('BAZ')) AS T
    WHERE OBJECT_ID = QUOTE_IDENTIFIER(CURRENT SCHEMA) || '.FOO'
    AND AUTH = 'CONTROL'), 1)!

DROP TABLE FOO!

-- vim: set et sw=4 sts=4:
